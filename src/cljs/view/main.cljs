(ns view.main
  (:require-macros [cljs.core.async.macros :refer [go]])
  (:require [cljs.core.async :refer [<! put! chan]]
            [om.core :as om :include-macros true]
            [om.dom :as dom :include-macros true]
            [thi.ng.geom.core.vector :refer [vec2]]
            [view.view :refer [draw-circle]]
            [view.animator :refer [animator]]))

(enable-console-print!)

(def pt vec2)


;; Define your own stop? and update functions.
;; The animator knows nothing of their internals.

(defn alpha
  [elapsed-time {:keys [delay duration]}]
  (* .001 (- (+ delay duration) elapsed-time)))

(defn stop?
  [elapsed-time opts]
  (< (alpha elapsed-time opts) 0))

(defn update
  [elapsed-time canvas {:keys [center radius line-width scale color delay] :as opts}]
  (let [context (.getContext canvas "2d")
        a (alpha elapsed-time opts)]
    (when (>= elapsed-time delay)
      (.clearRect context 0 0 (.-width canvas) (.-height canvas))
      (draw-circle context center radius line-width scale
                   (merge color {:a a})))))

;; Some opts are for the animator's use;
;; all opts (plus elapsed-time, which is generated by the animator)
;; are passed on to stop? and update:

(def common-opts
  {:parent (. js/document (getElementById "anim"))
   :stop? stop?
   :update update})

(def m0 (merge common-opts
               {:center (pt 100 100)
                :radius 50
                :line-width 2
                :scale 1
                :color {:r 255 :g 0 :b 0}
                :delay 1000
                :duration 1000}))

(def m1 (merge common-opts
               {:center (pt 400 200)
                :radius 75
                :line-width 2
                :scale 1
                :color {:r 0 :g 255 :b 0}
                :delay 0
                :duration 2000}))


(defn home-page [cursor owner opts]
  (reify
    om/IRender
    (render [_]
      (apply dom/div #js {}
             (map #(om/build animator nil %) opts)))))

(om/root home-page
         (atom {})
         ;; target must not be null but we're not using it:
         {:target (. js/document (getElementById "dummy"))
          :opts [{:opts m0} {:opts m1}]})
